// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7T82rs8ypY1wyRtbq2WyBY
// Component: 2O9ZZbxP-nVl

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button2 from "../../Button2"; // plasmic-import: CDCexgZSPKC3/component
import Select from "../../Select"; // plasmic-import: Q1osv0uQLlR_/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7T82rs8ypY1wyRtbq2WyBY/projectcss
import sty from "./PlasmicDiseaseoneselecttype.module.css"; // plasmic-import: 2O9ZZbxP-nVl/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: WWciTFaavqMj/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: lq3Ujgm15KtO/icon

createPlasmicElementProxy;

export type PlasmicDiseaseoneselecttype__VariantMembers = {};
export type PlasmicDiseaseoneselecttype__VariantsArgs = {};
type VariantPropType = keyof PlasmicDiseaseoneselecttype__VariantsArgs;
export const PlasmicDiseaseoneselecttype__VariantProps =
  new Array<VariantPropType>();

export type PlasmicDiseaseoneselecttype__ArgsType = {};
type ArgPropType = keyof PlasmicDiseaseoneselecttype__ArgsType;
export const PlasmicDiseaseoneselecttype__ArgProps = new Array<ArgPropType>();

export type PlasmicDiseaseoneselecttype__OverridesType = {
  root?: Flex__<"div">;
  select4?: Flex__<typeof Select>;
  select2?: Flex__<typeof Select>;
  select3?: Flex__<typeof Select>;
};

export interface DefaultDiseaseoneselecttypeProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDiseaseoneselecttype__RenderFunc(props: {
  variants: PlasmicDiseaseoneselecttype__VariantsArgs;
  args: PlasmicDiseaseoneselecttype__ArgsType;
  overrides: PlasmicDiseaseoneselecttype__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "\u6cb3\u5317"
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "\u810a\u67f1\u4fa7\u5f2f"
      },
      {
        path: "diseaseTypeList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            label: "\u810a\u67f1\u4fa7\u5f2f",
            value: "\u810a\u67f1\u4fa7\u5f2f"
          },
          {
            label: "\u5f3a\u76f4\u6027\u810a\u67f1\u708e",
            value: "\u5f3a\u76f4\u6027\u810a\u67f1\u708e"
          }
        ]
      },
      {
        path: "typelist",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <Button2
            className={classNames("__wab_instance", sty.button2__hfr6X)}
            color={"white"}
            onClick={async event => {
              const $steps = {};

              $steps["goTo选择病种"] = true
                ? (() => {
                    const actionArgs = {};
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goTo选择病种"] != null &&
                typeof $steps["goTo选择病种"] === "object" &&
                typeof $steps["goTo选择病种"].then === "function"
              ) {
                $steps["goTo选择病种"] = await $steps["goTo选择病种"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___0B4U9
              )}
            >
              {"\u8fd4\u56de"}
            </div>
          </Button2>
          <Select
            data-plasmic-name={"select4"}
            data-plasmic-override={overrides.select4}
            className={classNames("__wab_instance", sty.select4)}
            onChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["select4", "value"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);
              (async value => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            if ($state.select4.value === "强直性脊柱炎") {
                              $state.typelist = [
                                {
                                  label: "脊柱需要做1次",
                                  value: "脊柱需要做1次"
                                },
                                {
                                  label: "脊柱需要做2次",
                                  value: "脊柱需要做2次"
                                }
                              ];

                              return $state.typelist;
                            } else {
                              $state.typelist = [
                                {
                                  label: "脊柱需要牵引",
                                  value: "脊柱需要牵引"
                                },
                                {
                                  label: "脊柱不需要牵引",
                                  value: "脊柱不需要牵引"
                                }
                              ];

                              return $state.typelist;
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }).apply(null, eventArgs);
            }}
            options={(() => {
              try {
                return $state.diseaseTypeList;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [{}];
                }
                throw e;
              }
            })()}
            placeholder={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cTWpm
                )}
              >
                {"\u8bf7\u9009\u62e9\u75c5\u79cd"}
              </div>
            }
            value={generateStateValueProp($state, ["select4", "value"])}
          />

          <Select
            data-plasmic-name={"select2"}
            data-plasmic-override={overrides.select2}
            className={classNames("__wab_instance", sty.select2)}
            onChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["select2", "value"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);
              (async value => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return undefined;
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }).apply(null, eventArgs);
            }}
            options={(() => {
              try {
                return $state.typelist;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            placeholder={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ckZtf
                )}
              >
                {"\u8bf7\u9009\u62e9\u7c7b\u578b"}
              </div>
            }
            value={generateStateValueProp($state, ["select2", "value"])}
          />

          <Select
            data-plasmic-name={"select3"}
            data-plasmic-override={overrides.select3}
            className={classNames("__wab_instance", sty.select3)}
            onChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["select3", "value"])(
                eventArgs[0]
              );
            }}
            options={(() => {
              const __composite = [
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null }
              ];
              __composite["0"]["value"] = "\u5317\u4eac";
              __composite["0"]["label"] = "\u5317\u4eac";
              __composite["1"]["value"] = "\u5929\u6d25";
              __composite["1"]["label"] = "\u5929\u6d25";
              __composite["2"]["value"] = "\u6cb3\u5317";
              __composite["2"]["label"] = "\u6cb3\u5317";
              __composite["3"]["value"] = "\u5c71\u897f";
              __composite["3"]["label"] = "\u5c71\u897f";
              __composite["4"]["value"] = "\u5185\u8499\u53e4";
              __composite["4"]["label"] = "\u5185\u8499\u53e4";
              __composite["5"]["value"] = "\u8fbd\u5b81";
              __composite["5"]["label"] = "\u8fbd\u5b81";
              __composite["6"]["value"] = "\u5409\u6797";
              __composite["6"]["label"] = "\u5409\u6797";
              __composite["7"]["value"] = "\u9ed1\u9f99\u6c5f";
              __composite["7"]["label"] = "\u9ed1\u9f99\u6c5f";
              __composite["8"]["value"] = "\u4e0a\u6d77";
              __composite["8"]["label"] = "\u4e0a\u6d77";
              __composite["9"]["value"] = "\u6c5f\u82cf";
              __composite["9"]["label"] = "\u6c5f\u82cf";
              __composite["10"]["value"] = "\u6d59\u6c5f";
              __composite["10"]["label"] = "\u6d59\u6c5f";
              __composite["11"]["value"] = "\u5b89\u5fbd";
              __composite["11"]["label"] = "\u5b89\u5fbd";
              __composite["12"]["value"] = "\u798f\u5efa";
              __composite["12"]["label"] = "\u798f\u5efa";
              __composite["13"]["value"] = "\u6c5f\u897f";
              __composite["13"]["label"] = "\u6c5f\u897f";
              __composite["14"]["value"] = "\u5c71\u4e1c";
              __composite["14"]["label"] = "\u5c71\u4e1c";
              __composite["15"]["value"] = "\u6cb3\u5357";
              __composite["15"]["label"] = "\u6cb3\u5357";
              __composite["16"]["value"] = "\u6e56\u5317";
              __composite["16"]["label"] = "\u6e56\u5317";
              __composite["17"]["value"] = "\u6e56\u5357";
              __composite["17"]["label"] = "\u6e56\u5357";
              __composite["18"]["value"] = "\u5e7f\u4e1c";
              __composite["18"]["label"] = "\u5e7f\u4e1c";
              __composite["19"]["value"] = "\u5e7f\u897f";
              __composite["19"]["label"] = "\u5e7f\u897f";
              __composite["20"]["value"] = "\u6d77\u5357";
              __composite["20"]["label"] = "\u6d77\u5357";
              __composite["21"]["value"] = "\u91cd\u5e86";
              __composite["21"]["label"] = "\u91cd\u5e86";
              __composite["22"]["value"] = "\u56db\u5ddd";
              __composite["22"]["label"] = "\u56db\u5ddd";
              __composite["23"]["value"] = "\u8d35\u5dde";
              __composite["23"]["label"] = "\u8d35\u5dde";
              __composite["24"]["value"] = "\u4e91\u5357";
              __composite["24"]["label"] = "\u4e91\u5357";
              __composite["25"]["value"] = "\u897f\u85cf";
              __composite["25"]["label"] = "\u897f\u85cf";
              __composite["26"]["value"] = "\u9655\u897f";
              __composite["26"]["label"] = "\u9655\u897f";
              __composite["27"]["value"] = "\u7518\u8083";
              __composite["27"]["label"] = "\u7518\u8083";
              __composite["28"]["value"] = "\u9752\u6d77";
              __composite["28"]["label"] = "\u9752\u6d77";
              __composite["29"]["value"] = "\u5b81\u590f";
              __composite["29"]["label"] = "\u5b81\u590f";
              __composite["30"]["value"] = "\u65b0\u7586";
              __composite["30"]["label"] = "\u65b0\u7586";
              __composite["31"]["value"] = "\u53f0\u6e7e";
              __composite["31"]["label"] = "\u53f0\u6e7e";
              __composite["32"]["value"] = "\u9999\u6e2f";
              __composite["32"]["label"] = "\u9999\u6e2f";
              __composite["33"]["value"] = "\u6fb3\u95e8";
              __composite["33"]["label"] = "\u6fb3\u95e8";
              __composite["34"]["value"] = "\u6d77\u5916";
              __composite["34"]["label"] = "\u6d77\u5916";
              return __composite;
            })()}
            placeholder={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qjCt6
                )}
              >
                {"\u8bf7\u9009\u62e9\u533b\u4fdd\u6240\u5728\u7701\u4efd"}
              </div>
            }
            value={generateStateValueProp($state, ["select3", "value"])}
          />

          <Button2
            className={classNames("__wab_instance", sty.button2__etBd1)}
            color={"green"}
            onClick={async event => {
              const $steps = {};

              $steps["goTo告知患者自费预测"] = true
                ? (() => {
                    const actionArgs = { destination: `/fee` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goTo告知患者自费预测"] != null &&
                typeof $steps["goTo告知患者自费预测"] === "object" &&
                typeof $steps["goTo告知患者自费预测"].then === "function"
              ) {
                $steps["goTo告知患者自费预测"] = await $steps[
                  "goTo告知患者自费预测"
                ];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return undefined;
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
            shape={"sharp"}
            size={"compact"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tx379
              )}
            >
              {"\u4e0b\u4e00\u6b65"}
            </div>
          </Button2>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "select4", "select2", "select3"],
  select4: ["select4"],
  select2: ["select2"],
  select3: ["select3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  select4: typeof Select;
  select2: typeof Select;
  select3: typeof Select;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDiseaseoneselecttype__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDiseaseoneselecttype__VariantsArgs;
    args?: PlasmicDiseaseoneselecttype__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDiseaseoneselecttype__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDiseaseoneselecttype__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDiseaseoneselecttype__ArgProps,
          internalVariantPropNames: PlasmicDiseaseoneselecttype__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDiseaseoneselecttype__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDiseaseoneselecttype";
  } else {
    func.displayName = `PlasmicDiseaseoneselecttype.${nodeName}`;
  }
  return func;
}

export const PlasmicDiseaseoneselecttype = Object.assign(
  // Top-level PlasmicDiseaseoneselecttype renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    select4: makeNodeComponent("select4"),
    select2: makeNodeComponent("select2"),
    select3: makeNodeComponent("select3"),

    // Metadata about props expected for PlasmicDiseaseoneselecttype
    internalVariantProps: PlasmicDiseaseoneselecttype__VariantProps,
    internalArgProps: PlasmicDiseaseoneselecttype__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDiseaseoneselecttype;
/* prettier-ignore-end */
