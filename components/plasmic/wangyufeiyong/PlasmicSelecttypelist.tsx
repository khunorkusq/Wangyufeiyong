// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7T82rs8ypY1wyRtbq2WyBY
// Component: FV1gqUI1BFcU

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import Button2 from "../../Button2"; // plasmic-import: CDCexgZSPKC3/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7T82rs8ypY1wyRtbq2WyBY/projectcss
import sty from "./PlasmicSelecttypelist.module.css"; // plasmic-import: FV1gqUI1BFcU/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: WWciTFaavqMj/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: lq3Ujgm15KtO/icon

createPlasmicElementProxy;

export type PlasmicSelecttypelist__VariantMembers = {};
export type PlasmicSelecttypelist__VariantsArgs = {};
type VariantPropType = keyof PlasmicSelecttypelist__VariantsArgs;
export const PlasmicSelecttypelist__VariantProps = new Array<VariantPropType>();

export type PlasmicSelecttypelist__ArgsType = {};
type ArgPropType = keyof PlasmicSelecttypelist__ArgsType;
export const PlasmicSelecttypelist__ArgProps = new Array<ArgPropType>();

export type PlasmicSelecttypelist__OverridesType = {
  root?: Flex__<"div">;
  radioGroup?: Flex__<typeof AntdRadioGroup>;
  radioGroup2?: Flex__<typeof AntdRadioGroup>;
  radioGroup3?: Flex__<typeof AntdRadioGroup>;
  button2?: Flex__<typeof Button2>;
};

export interface DefaultSelecttypelistProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelecttypelist__RenderFunc(props: {
  variants: PlasmicSelecttypelist__VariantsArgs;
  args: PlasmicSelecttypelist__ArgsType;
  overrides: PlasmicSelecttypelist__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "radioGroup2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "radioGroup3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__n9UeB
            )}
          >
            {"\u8bf7\u9009\u62e9\u75c5\u79cd"}
          </div>
          <AntdRadioGroup
            data-plasmic-name={"radioGroup"}
            data-plasmic-override={overrides.radioGroup}
            className={classNames("__wab_instance", sty.radioGroup)}
            onChange={generateStateOnChangeProp($state, [
              "radioGroup",
              "value"
            ])}
            optionType={"button"}
            options={[
              { value: "option1", label: "Option 1" },
              { value: "option2", label: "Option 2" }
            ]}
            value={generateStateValueProp($state, ["radioGroup", "value"])}
          >
            <AntdRadio
              className={classNames("__wab_instance", sty.radio__lkAbu)}
              value={"op1"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fMwVo
                )}
              >
                {"Option 1"}
              </div>
            </AntdRadio>
            <AntdRadio
              className={classNames("__wab_instance", sty.radio__ipl6M)}
              value={"op2"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7Ysxl
                )}
              >
                {"Option 2"}
              </div>
            </AntdRadio>
          </AntdRadioGroup>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ivu4
            )}
          >
            {"\u8bf7\u9009\u62e9\u7c7b\u578b"}
          </div>
          <AntdRadioGroup
            data-plasmic-name={"radioGroup2"}
            data-plasmic-override={overrides.radioGroup2}
            className={classNames("__wab_instance", sty.radioGroup2)}
            onChange={generateStateOnChangeProp($state, [
              "radioGroup2",
              "value"
            ])}
            optionType={"button"}
            options={[
              { value: "option1", label: "Option 1" },
              { value: "option2", label: "Option 2" }
            ]}
            value={generateStateValueProp($state, ["radioGroup2", "value"])}
          >
            <AntdRadio
              className={classNames("__wab_instance", sty.radio__sopyj)}
              value={"op1"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zSfe
                )}
              >
                {"Option 1"}
              </div>
            </AntdRadio>
            <AntdRadio
              className={classNames("__wab_instance", sty.radio__cNgEf)}
              value={"op2"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vpqN
                )}
              >
                {"Option 2"}
              </div>
            </AntdRadio>
          </AntdRadioGroup>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lVi
            )}
          >
            {"\u8bf7\u9009\u62e9\u533b\u4fdd\u6240\u5728\u7701\u4efd"}
          </div>
          <AntdRadioGroup
            data-plasmic-name={"radioGroup3"}
            data-plasmic-override={overrides.radioGroup3}
            className={classNames("__wab_instance", sty.radioGroup3)}
            onChange={generateStateOnChangeProp($state, [
              "radioGroup3",
              "value"
            ])}
            optionType={"button"}
            options={(() => {
              const __composite = [
                { value: "option1", label: "Option 1" },
                { value: "option2", label: "Option 2" },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null }
              ];
              __composite["2"]["value"] = "1";
              __composite["2"]["label"] = "1";
              __composite["3"]["value"] = "2";
              __composite["3"]["label"] = "2";
              __composite["4"]["value"] = "3";
              __composite["4"]["label"] = "3";
              __composite["5"]["value"] = "4";
              __composite["5"]["label"] = "4";
              __composite["6"]["value"] = "5";
              __composite["6"]["label"] = "5";
              __composite["7"]["value"] = "6";
              __composite["7"]["label"] = "6";
              __composite["8"]["value"] = "7";
              __composite["8"]["label"] = "7";
              return __composite;
            })()}
            value={generateStateValueProp($state, ["radioGroup3", "value"])}
          >
            <AntdRadio
              className={classNames("__wab_instance", sty.radio__i2Qpd)}
              value={"op1"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nrkWe
                )}
              >
                {"Option 1"}
              </div>
            </AntdRadio>
            <AntdRadio
              className={classNames("__wab_instance", sty.radio__cLcjz)}
              value={"op2"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jFOx
                )}
              >
                {"Option 2"}
              </div>
            </AntdRadio>
          </AntdRadioGroup>
          <Button2
            data-plasmic-name={"button2"}
            data-plasmic-override={overrides.button2}
            className={classNames("__wab_instance", sty.button2)}
            color={"green"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__j2Y2D
              )}
            >
              {"\u4e0b\u4e00\u6b65"}
            </div>
          </Button2>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "radioGroup", "radioGroup2", "radioGroup3", "button2"],
  radioGroup: ["radioGroup"],
  radioGroup2: ["radioGroup2"],
  radioGroup3: ["radioGroup3"],
  button2: ["button2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  radioGroup: typeof AntdRadioGroup;
  radioGroup2: typeof AntdRadioGroup;
  radioGroup3: typeof AntdRadioGroup;
  button2: typeof Button2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelecttypelist__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelecttypelist__VariantsArgs;
    args?: PlasmicSelecttypelist__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelecttypelist__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSelecttypelist__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelecttypelist__ArgProps,
          internalVariantPropNames: PlasmicSelecttypelist__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelecttypelist__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelecttypelist";
  } else {
    func.displayName = `PlasmicSelecttypelist.${nodeName}`;
  }
  return func;
}

export const PlasmicSelecttypelist = Object.assign(
  // Top-level PlasmicSelecttypelist renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    radioGroup: makeNodeComponent("radioGroup"),
    radioGroup2: makeNodeComponent("radioGroup2"),
    radioGroup3: makeNodeComponent("radioGroup3"),
    button2: makeNodeComponent("button2"),

    // Metadata about props expected for PlasmicSelecttypelist
    internalVariantProps: PlasmicSelecttypelist__VariantProps,
    internalArgProps: PlasmicSelecttypelist__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSelecttypelist;
/* prettier-ignore-end */
